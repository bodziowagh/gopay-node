{"version":3,"sources":["RestAPI.js"],"names":["require","camelcase","decamelize","FormData","constants_1","object_1","RestAPI","options","endpoint","DEFAULT_ENDPOINT","appId","process","env","ENV_KEY_APP_ID","secret","ENV_KEY_SECRET","camel","requestParams","params","transformKeys","requestUrl","url","data","isQueryString","queryString","Object","keys","map","k","encodeURIComponent","join","requestBody","constructor","JSON","stringify","getBody","payload","getHeaders","body","headers","Headers","append","send","method","callback","indexOf","Promise","resolve","reject","request","Request","mode","fetch","then","response","all","status","text","parse","err","result","catch","error","exports"],"mappings":"AAAA;;;;;;AACAA,QAAQ,kBAAR;AACA,IAAMC,YAAYD,QAAQ,WAAR,CAAlB;AACA,IAAME,aAAaF,QAAQ,YAAR,CAAnB;AACA,IAAMG,WAAWH,QAAQ,WAAR,CAAjB;AACA,IAAMI,cAAcJ,QAAQ,cAAR,CAApB;AACA,IAAMK,WAAWL,QAAQ,iBAAR,CAAjB;;IACMM,O;AACF,uBAA0B;AAAA,YAAdC,OAAc,yDAAJ,EAAI;;AAAA;;AACtB,aAAKC,QAAL,GAAgBD,QAAQC,QAAR,IAAoBJ,YAAYK,gBAAhD;AACA,aAAKC,KAAL,GAAaH,QAAQG,KAAR,IAAiBC,QAAQC,GAAR,CAAYR,YAAYS,cAAxB,CAA9B;AACA,aAAKC,MAAL,GAAcP,QAAQO,MAAR,IAAkBH,QAAQC,GAAR,CAAYR,YAAYW,cAAxB,CAAhC;AACA,aAAKC,KAAL,GAAaT,QAAQS,KAAR,IAAiB,KAA9B;AACH;;YACMC,a,0BAAcC,M,EAAQ;AACzB,eAAOb,SAASc,aAAT,CAAuBD,MAAvB,EAA+BhB,UAA/B,CAAP;AACH,K;;YACMkB,U,uBAAWC,G,EAAKC,I,EAAMC,a,EAAe;AACxC,YAAIC,oBAAJ;AACA,YAAID,aAAJ,EAAmB;AACfC,0BAAcC,OAAOC,IAAP,CAAYJ,QAAQ,EAApB,EACTK,GADS,CACL,UAACC,CAAD;AAAA,uBAAUC,mBAAmBD,CAAnB,CAAV,SAAmCC,mBAAmBP,KAAKM,CAAL,CAAnB,CAAnC;AAAA,aADK,EAETE,IAFS,CAEJ,GAFI,CAAd;AAGH;AACD,eAAON,cAAiBH,GAAjB,SAAwBG,WAAxB,GAAwCH,GAA/C;AACH,K;;YACMU,W,wBAAYT,I,EAAMC,a,EAAe;AACpC,YAAI,CAAC,CAACD,IAAF,IAAUA,KAAKU,WAAL,KAAqB7B,QAAnC,EAA6C;AACzC,mBAAOmB,IAAP;AACH,SAFD,MAGK,IAAI,QAAOA,IAAP,yCAAOA,IAAP,OAAgB,QAAhB,IAA4B,CAACC,aAAjC,EAAgD;AACjD,mBAAOU,KAAKC,SAAL,CAAeZ,IAAf,CAAP;AACH;AACD,eAAO,IAAP;AACH,K;;sBACDa,O,oBAAQb,I,EAAMc,O,EAAS;AACnB,eAAO,CAACA,OAAD,GAAWH,KAAKC,SAAL,CAAeZ,IAAf,CAAX,GAAkC,IAAzC;AACH,K;;sBACDe,U,uBAAWC,I,EAAM;AACb,YAAMC,UAAU,IAAIC,OAAJ,EAAhB;AACAD,gBAAQE,MAAR,CAAe,QAAf,EAAyB,kBAAzB;AACAF,gBAAQE,MAAR,CAAe,cAAf,EAA+B,kBAA/B;AACAF,gBAAQE,MAAR,CAAe,eAAf,wBAAoD,KAAK/B,KAAzD,UAAkE,KAAKI,MAAL,IAAe,EAAjF;AACA,eAAOyB,OAAP;AACH,K;;sBACDG,I,iBAAKC,M,EAAQtB,G,EAAKC,I,EAAMsB,Q,EAAU;AAAA;;AAC9B,YAAMR,UAAU,CAAC,KAAD,EAAQ,QAAR,EAAkBS,OAAlB,CAA0BF,MAA1B,MAAsC,CAAC,CAAvD;AACA,YAAML,OAAO,KAAKH,OAAL,CAAab,IAAb,EAAmBc,OAAnB,CAAb;AACA,YAAMG,UAAU,KAAKF,UAAL,CAAgBC,IAAhB,CAAhB;AACA,eAAO,IAAIQ,OAAJ,CAAY,UAACC,OAAD,EAAUC,MAAV,EAAqB;AACpC,gBAAMC,UAAU,IAAIC,OAAJ,MAAe,MAAK1C,QAApB,GAA+BF,QAAQc,UAAR,CAAmBC,GAAnB,EAAwBC,IAAxB,EAA8Bc,OAA9B,CAA/B,EAAyE;AACrFE,0BADqF;AAErFC,gCAFqF;AAGrFI,8BAHqF;AAIrFQ,sBAAM;AAJ+E,aAAzE,CAAhB;AAMAC,kBAAMH,OAAN,EACKI,IADL,CACU,UAACC,QAAD;AAAA,uBAAcR,QAAQS,GAAR,CAAY,CAACT,QAAQC,OAAR,CAAgBO,SAASE,MAAzB,CAAD,EAAmCF,SAASG,IAAT,EAAnC,CAAZ,CAAd;AAAA,aADV,EAEKJ,IAFL,CAEU,gBAAoB;AAAA,oBAAlBG,MAAkB;AAAA,oBAAVC,IAAU;;AAC1B,uBAAOX,QAAQS,GAAR,CAAY,CACfT,QAAQC,OAAR,CAAgBS,MAAhB,CADe,EAEfV,QAAQC,OAAR,CAAgBU,OAAOxB,KAAKyB,KAAL,CAAWD,IAAX,CAAP,GAA0B,EAA1C,CAFe,CAAZ,CAAP;AAIH,aAPD,EAQKJ,IARL,CAQU,iBAAoB;AAAA,oBAAlBG,MAAkB;AAAA,oBAAVlB,IAAU;;AAC1B;AACA,oBAAMqB,MAAM,IAAZ;AACA,oBAAIA,QAAQ,IAAZ,EAAkB;AACd,0BAAMA,GAAN;AACH;AACD,oBAAMC,SAAS,MAAK5C,KAAL,GAAaX,SAASc,aAAT,CAAuBmB,IAAvB,EAA6BrC,SAA7B,CAAb,GAAuDqC,IAAtE;AACAM,yBAASgB,MAAT;AACAb,wBAAQa,MAAR;AACH,aAjBD,EAkBKC,KAlBL,CAkBW,UAACC,KAAD,EAAW;AAClBlB,yBAASkB,KAAT,EADkB,CACD;AACjBd,uBAAOc,KAAP;AACH,aArBD;AAsBH,SA7BM,CAAP;AA8BH,K;;;;;AAELC,QAAQzD,OAAR,GAAkBA,OAAlB","file":"RestAPI.js","sourcesContent":["\"use strict\";\nrequire(\"isomorphic-fetch\");\nconst camelcase = require(\"camelcase\");\nconst decamelize = require(\"decamelize\");\nconst FormData = require(\"form-data\");\nconst constants_1 = require(\"../constants\");\nconst object_1 = require(\"../utils/object\");\nclass RestAPI {\n    constructor(options = {}) {\n        this.endpoint = options.endpoint || constants_1.DEFAULT_ENDPOINT;\n        this.appId = options.appId || process.env[constants_1.ENV_KEY_APP_ID];\n        this.secret = options.secret || process.env[constants_1.ENV_KEY_SECRET];\n        this.camel = options.camel || false;\n    }\n    static requestParams(params) {\n        return object_1.transformKeys(params, decamelize);\n    }\n    static requestUrl(url, data, isQueryString) {\n        let queryString;\n        if (isQueryString) {\n            queryString = Object.keys(data || {})\n                .map((k) => `${encodeURIComponent(k)}=${encodeURIComponent(data[k])}`)\n                .join(\"&\");\n        }\n        return queryString ? `${url}?${queryString}` : url;\n    }\n    static requestBody(data, isQueryString) {\n        if (!!data && data.constructor === FormData) {\n            return data;\n        }\n        else if (typeof data === \"object\" && !isQueryString) {\n            return JSON.stringify(data);\n        }\n        return null;\n    }\n    getBody(data, payload) {\n        return !payload ? JSON.stringify(data) : null;\n    }\n    getHeaders(body) {\n        const headers = new Headers();\n        headers.append(\"Accept\", \"application/json\");\n        headers.append(\"Content-Type\", \"application/json\");\n        headers.append(\"Authorization\", `ApplicationToken ${this.appId}|${this.secret || \"\"}`);\n        return headers;\n    }\n    send(method, url, data, callback) {\n        const payload = [\"GET\", \"DELETE\"].indexOf(method) !== -1;\n        const body = this.getBody(data, payload);\n        const headers = this.getHeaders(body);\n        return new Promise((resolve, reject) => {\n            const request = new Request(`${this.endpoint}${RestAPI.requestUrl(url, data, payload)}`, {\n                body,\n                headers,\n                method,\n                mode: \"cors\"\n            });\n            fetch(request)\n                .then((response) => Promise.all([Promise.resolve(response.status), response.text()]))\n                .then(([status, text]) => {\n                return Promise.all([\n                    Promise.resolve(status),\n                    Promise.resolve(text ? JSON.parse(text) : {})\n                ]);\n            })\n                .then(([status, body]) => {\n                //const err: any = errorFromResponse(status, body)\n                const err = null;\n                if (err !== null) {\n                    throw err;\n                }\n                const result = this.camel ? object_1.transformKeys(body, camelcase) : body;\n                callback(result);\n                resolve(result);\n            })\n                .catch((error) => {\n                callback(error); // TODO: transform to error shape\n                reject(error);\n            });\n        });\n    }\n}\nexports.RestAPI = RestAPI;\n"]}