{"version":3,"sources":["Merchants.js"],"names":["CRUDResource_1","require","merchant_1","Merchants","arguments","_changePasswordRoute","defineRoute","_resetPasswordRoute","list","callback","data","token","_listRoute","create","_createRoute","validationSchema","merchantCreateSchema","get","id","params","_getRoute","update","_updateRoute","merchantUpdateSchema","delete","_deleteRoute","changePassword","merchantId","merchantChangePasswordSchema","Boolean","resetPassword","merchantResetPasswordSchema","CRUDResource","routeBase","exports"],"mappings":"AAAA;;;;;;;;AACA,IAAMA,iBAAiBC,QAAQ,gBAAR,CAAvB;AACA,IAAMC,aAAaD,QAAQ,gCAAR,CAAnB;;IACME,S;;;AACF,yBAAc;AAAA;;AAAA,qDACV,kCAASC,SAAT,CADU;;AAEV,cAAKC,oBAAL,GAA4B,MAAKC,WAAL,CAAiB,MAAjB,EAAyB,0CAAzB,CAA5B;AACA,cAAKC,mBAAL,GAA2B,MAAKD,WAAL,CAAiB,MAAjB,EAAyB,iBAAzB,CAA3B;AAHU;AAIb;;wBACDE,I,iBAAKC,Q,EAAUC,I,EAAMC,K,EAAO;AACxB,eAAO,KAAKC,UAAL,CAAgB,IAAhB,EAAsBF,IAAtB,EAA4BD,QAA5B,EAAsC,EAAEE,YAAF,EAAtC,CAAP;AACH,K;;wBACDE,M,mBAAOH,I,EAAMD,Q,EAAUE,K,EAAO;AAC1B,eAAO,KAAKG,YAAL,CAAkB,IAAlB,EAAwBJ,IAAxB,EAA8BD,QAA9B,EAAwC,EAAEE,YAAF,EAASI,kBAAkBb,WAAWc,oBAAtC,EAAxC,CAAP;AACH,K;;wBACDC,G,gBAAIC,E,EAAIT,Q,EAAUE,K,EAAO;AACrB,YAAMQ,SAAS,EAAED,MAAF,EAAf;AACA,eAAO,KAAKE,SAAL,CAAeD,MAAf,EAAuB,IAAvB,EAA6BV,QAA7B,EAAuC,EAAEE,YAAF,EAAvC,CAAP;AACH,K;;wBACDU,M,mBAAOH,E,EAAIR,I,EAAMD,Q,EAAUE,K,EAAO;AAC9B,YAAMQ,SAAS,EAAED,MAAF,EAAf;AACA,eAAO,KAAKI,YAAL,CAAkBH,MAAlB,EAA0BT,IAA1B,EAAgCD,QAAhC,EAA0C,EAAEE,YAAF,EAASI,kBAAkBb,WAAWqB,oBAAtC,EAA1C,CAAP;AACH,K;;wBACDC,M,oBAAON,E,EAAIT,Q,EAAUE,K,EAAO;AACxB,YAAMQ,SAAS,EAAED,MAAF,EAAf;AACA,eAAO,KAAKO,YAAL,CAAkBN,MAAlB,EAA0B,IAA1B,EAAgCV,QAAhC,EAA0C,EAAEE,YAAF,EAA1C,CAAP;AACH,K;;wBACDe,c,2BAAehB,I,EAAMD,Q,EAAUkB,U,EAAYhB,K,EAAO;AAC9C,YAAMQ,SAAS,EAAEQ,sBAAF,EAAf;AACA,YAAMZ,mBAAmBb,WAAW0B,4BAAX,CAAwCC,QAAQlB,KAAR,CAAxC,CAAzB;AACA,eAAO,KAAKN,oBAAL,CAA0Bc,MAA1B,EAAkCT,IAAlC,EAAwCD,QAAxC,EAAkD,EAAEE,YAAF,EAASI,kCAAT,EAAlD,CAAP;AACH,K;;wBACDe,a,0BAAcpB,I,EAAMD,Q,EAAU;AAC1B,eAAO,KAAKF,mBAAL,CAAyB,IAAzB,EAA+BG,IAA/B,EAAqCD,QAArC,EAA+C,EAAEM,kBAAkBb,WAAW6B,2BAA/B,EAA/C,CAAP;AACH,K;;;EA/BmB/B,eAAegC,Y;;AAiCvC7B,UAAU8B,SAAV,GAAsB,YAAtB;AACAC,QAAQ/B,SAAR,GAAoBA,SAApB","file":"Merchants.js","sourcesContent":["\"use strict\";\nconst CRUDResource_1 = require(\"./CRUDResource\");\nconst merchant_1 = require(\"../validation/schemas/merchant\");\nclass Merchants extends CRUDResource_1.CRUDResource {\n    constructor() {\n        super(...arguments);\n        this._changePasswordRoute = this.defineRoute(\"POST\", \"/(merchants/:merchantId/)change_password\");\n        this._resetPasswordRoute = this.defineRoute(\"POST\", \"/reset_password\");\n    }\n    list(callback, data, token) {\n        return this._listRoute(null, data, callback, { token });\n    }\n    create(data, callback, token) {\n        return this._createRoute(null, data, callback, { token, validationSchema: merchant_1.merchantCreateSchema });\n    }\n    get(id, callback, token) {\n        const params = { id };\n        return this._getRoute(params, null, callback, { token });\n    }\n    update(id, data, callback, token) {\n        const params = { id };\n        return this._updateRoute(params, data, callback, { token, validationSchema: merchant_1.merchantUpdateSchema });\n    }\n    delete(id, callback, token) {\n        const params = { id };\n        return this._deleteRoute(params, null, callback, { token });\n    }\n    changePassword(data, callback, merchantId, token) {\n        const params = { merchantId };\n        const validationSchema = merchant_1.merchantChangePasswordSchema(Boolean(token));\n        return this._changePasswordRoute(params, data, callback, { token, validationSchema });\n    }\n    resetPassword(data, callback) {\n        return this._resetPasswordRoute(null, data, callback, { validationSchema: merchant_1.merchantResetPasswordSchema });\n    }\n}\nMerchants.routeBase = \"/merchants\";\nexports.Merchants = Merchants;\n"]}