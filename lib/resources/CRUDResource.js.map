{"version":3,"sources":["CRUDResource.js"],"names":["WithAPI_1","require","validator_1","SDKError_1","error_codes_1","utils_1","CRUDResource","api","routeBase","constructor","_listRoute","defineRoute","_createRoute","_getRoute","_updateRoute","_deleteRoute","compilePath","path","pathParams","replace","o","part","s","p","indexOf","method","route","data","callback","options","url","schema","validationSchema","validatorData","FormData","entries","pair","validator","DataValidator","create","validationCodes","cb","err","result","fails","errors","all","errorFromValidation","Promise","reject","getBody","JSON","stringify","underscore","getUrl","_url","queryString","Object","keys","map","k","encodeURIComponent","join","send","body","WithAPI","exports"],"mappings":"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","file":"CRUDResource.js","sourcesContent":["\"use strict\";\nconst WithAPI_1 = require(\"../api/WithAPI\");\nconst validator_1 = require(\"../validation/validator\");\nconst SDKError_1 = require(\"../errors/SDKError\");\nconst error_codes_1 = require(\"../validation/error-codes\");\nconst utils_1 = require(\"../utils\");\nclass CRUDResource extends WithAPI_1.WithAPI {\n    constructor(api) {\n        super(api);\n        const routeBase = this.constructor.routeBase;\n        this._listRoute = this.defineRoute(\"GET\", routeBase);\n        this._createRoute = this.defineRoute(\"POST\", routeBase);\n        this._getRoute = this.defineRoute(\"GET\", `${routeBase}/:id`);\n        this._updateRoute = this.defineRoute(\"PATCH\", `${routeBase}/:id`);\n        this._deleteRoute = this.defineRoute(\"DELETE\", `${routeBase}/:id`);\n    }\n    static compilePath(path, pathParams) {\n        return path\n            .replace(/\\((\\w|:|\\/)+\\)/ig, (o) => {\n            const part = o.replace(/:(\\w+)/ig, (s, p) => {\n                return pathParams[p] || s;\n            });\n            return part.indexOf(\":\") === -1 ? part.replace(/\\(|\\)/g, \"\") : \"\";\n        })\n            .replace(/:(\\w+)/ig, (s, p) => pathParams[p] || s);\n    }\n    defineRoute(method, path) {\n        const api = this.api;\n        return function route(pathParams, data, callback, options) {\n            const url = CRUDResource.compilePath(path, pathParams);\n            const schema = options.validationSchema || {};\n            let validatorData = {};\n            if (data instanceof FormData) {\n                for (let pair of data.entries()) {\n                    validatorData[pair[0]] = pair[1];\n                }\n            }\n            else {\n                validatorData = data;\n            }\n            const validator = validator_1.DataValidator.create(validatorData, schema, error_codes_1.validationCodes);\n            const cb = callback || ((err, result) => null);\n            if (validator.fails()) {\n                const errors = validator.errors.all();\n                const err = SDKError_1.errorFromValidation(errors);\n                cb(err, null);\n                return Promise.reject(err);\n            }\n            function getBody() {\n                if (data instanceof FormData) {\n                    return data;\n                }\n                else if (typeof data === \"object\" && [\"GET\", \"DELETE\"].indexOf(method) === -1) {\n                    return JSON.stringify(utils_1.underscore(data));\n                }\n                return null;\n            }\n            function getUrl(_url) {\n                let queryString;\n                if ([\"GET\", \"DELETE\"].indexOf(method) !== -1) {\n                    queryString = Object.keys(data || {})\n                        .map((k) => `${encodeURIComponent(k)}=${encodeURIComponent(data[k])}`)\n                        .join(\"&\");\n                }\n                return queryString ? `${_url}?${queryString}` : _url;\n            }\n            return api.send({ body: getBody(), method, url: getUrl(url) }, cb, options);\n        };\n    }\n}\nexports.CRUDResource = CRUDResource;\n"]}