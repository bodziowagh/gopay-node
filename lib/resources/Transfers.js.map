{"version":3,"sources":["Transfers.js"],"names":["CRUDResource_1","require","transfer_1","Transfers","arguments","_finalizeTransfer","defineRoute","_getTransfersPendingMerchants","_getMerchantPendingTransfers","list","callback","data","merchantId","token","params","_listRoute","create","_createRoute","validationSchema","transferCreateSchema","get","id","_getRoute","update","_updateRoute","transferUpdateSchema","finalizeTransfer","getTransfersPendingMerchants","getMerchantPendingTransfers","transferPendingMerchantsSchema","CRUDResource","routeBase","exports"],"mappings":"AAAA;;;;;;;;AACA,IAAMA,iBAAiBC,QAAQ,gBAAR,CAAvB;AACA,IAAMC,aAAaD,QAAQ,gCAAR,CAAnB;;IACME,S;;;AACF,yBAAc;AAAA;;AAAA,qDACV,kCAASC,SAAT,CADU;;AAEV,cAAKC,iBAAL,GAAyB,MAAKC,WAAL,CAAiB,OAAjB,EAA0B,+CAA1B,CAAzB;AACA,cAAKC,6BAAL,GAAqC,MAAKD,WAAL,CAAiB,KAAjB,EAAwB,oBAAxB,CAArC;AACA,cAAKE,4BAAL,GAAoC,MAAKF,WAAL,CAAiB,KAAjB,EAAwB,0CAAxB,CAApC;AAJU;AAKb;;wBACDG,I,iBAAKC,Q,EAAUC,I,EAAMC,U,EAAYC,K,EAAO;AACpC,YAAMC,SAAS,EAAEF,sBAAF,EAAf;AACA,eAAO,KAAKG,UAAL,CAAgBD,MAAhB,EAAwBH,IAAxB,EAA8BD,QAA9B,EAAwC,EAAEG,YAAF,EAAxC,CAAP;AACH,K;;wBACDG,M,mBAAOL,I,EAAMD,Q,EAAUE,U,EAAYC,K,EAAO;AACtC,YAAMC,SAAS,EAAEF,sBAAF,EAAf;AACA,eAAO,KAAKK,YAAL,CAAkBH,MAAlB,EAA0BH,IAA1B,EAAgCD,QAAhC,EAA0C,EAAEG,YAAF,EAASK,kBAAkBhB,WAAWiB,oBAAtC,EAA1C,CAAP;AACH,K;;wBACDC,G,gBAAIC,E,EAAIX,Q,EAAUE,U,EAAYC,K,EAAO;AACjC,YAAMC,SAAS,EAAEO,MAAF,EAAMT,sBAAN,EAAf;AACA,eAAO,KAAKU,SAAL,CAAeR,MAAf,EAAuB,IAAvB,EAA6BJ,QAA7B,EAAuC,EAAEG,YAAF,EAAvC,CAAP;AACH,K;;wBACDU,M,mBAAOF,E,EAAIV,I,EAAMD,Q,EAAUE,U,EAAYC,K,EAAO;AAC1C,YAAMC,SAAS,EAAEO,MAAF,EAAMT,sBAAN,EAAf;AACA,eAAO,KAAKY,YAAL,CAAkBV,MAAlB,EAA0BH,IAA1B,EAAgCD,QAAhC,EAA0C,EAAEG,YAAF,EAASK,kBAAkBhB,WAAWuB,oBAAtC,EAA1C,CAAP;AACH,K;;wBACDC,gB,6BAAiBL,E,EAAIX,Q,EAAUE,U,EAAYC,K,EAAO;AAC9C,YAAMC,SAAS,EAAEO,MAAF,EAAMT,sBAAN,EAAf;AACA,eAAO,KAAKP,iBAAL,CAAuBS,MAAvB,EAA+B,IAA/B,EAAqCJ,QAArC,EAA+C,EAAEG,YAAF,EAA/C,CAAP;AACH,K;;wBACDc,4B,yCAA6Bf,U,EAAYF,Q,EAAUC,I,EAAME,K,EAAO;AAC5D,YAAMC,SAAS,EAAEF,sBAAF,EAAf;AACA,eAAO,KAAKL,6BAAL,CAAmCO,MAAnC,EAA2CH,IAA3C,EAAiDD,QAAjD,EAA2D,EAAEG,YAAF,EAA3D,CAAP;AACH,K;;wBACDe,2B,wCAA4BhB,U,EAAYF,Q,EAAUC,I,EAAME,K,EAAO;AAC3D,YAAMC,SAAS,EAAEF,sBAAF,EAAf;AACA,eAAO,KAAKJ,4BAAL,CAAkCM,MAAlC,EAA0CH,IAA1C,EAAgDD,QAAhD,EAA0D,EAAEG,YAAF,EAASK,kBAAkBhB,WAAW2B,8BAAtC,EAA1D,CAAP;AACH,K;;;EAlCmB7B,eAAe8B,Y;;AAoCvC3B,UAAU4B,SAAV,GAAsB,oCAAtB;AACAC,QAAQ7B,SAAR,GAAoBA,SAApB","file":"Transfers.js","sourcesContent":["\"use strict\";\nconst CRUDResource_1 = require(\"./CRUDResource\");\nconst transfer_1 = require(\"../validation/schemas/transfer\");\nclass Transfers extends CRUDResource_1.CRUDResource {\n    constructor() {\n        super(...arguments);\n        this._finalizeTransfer = this.defineRoute(\"PATCH\", \"/merchants/:merchantId/transfers/:id/finalize\");\n        this._getTransfersPendingMerchants = this.defineRoute(\"GET\", \"/transfers_pending\");\n        this._getMerchantPendingTransfers = this.defineRoute(\"GET\", \"/merchants/:merchantId/transfers_pending\");\n    }\n    list(callback, data, merchantId, token) {\n        const params = { merchantId };\n        return this._listRoute(params, data, callback, { token });\n    }\n    create(data, callback, merchantId, token) {\n        const params = { merchantId };\n        return this._createRoute(params, data, callback, { token, validationSchema: transfer_1.transferCreateSchema });\n    }\n    get(id, callback, merchantId, token) {\n        const params = { id, merchantId };\n        return this._getRoute(params, null, callback, { token });\n    }\n    update(id, data, callback, merchantId, token) {\n        const params = { id, merchantId };\n        return this._updateRoute(params, data, callback, { token, validationSchema: transfer_1.transferUpdateSchema });\n    }\n    finalizeTransfer(id, callback, merchantId, token) {\n        const params = { id, merchantId };\n        return this._finalizeTransfer(params, null, callback, { token });\n    }\n    getTransfersPendingMerchants(merchantId, callback, data, token) {\n        const params = { merchantId };\n        return this._getTransfersPendingMerchants(params, data, callback, { token });\n    }\n    getMerchantPendingTransfers(merchantId, callback, data, token) {\n        const params = { merchantId };\n        return this._getMerchantPendingTransfers(params, data, callback, { token, validationSchema: transfer_1.transferPendingMerchantsSchema });\n    }\n}\nTransfers.routeBase = \"/(merchants/:merchantId/)transfers\";\nexports.Transfers = Transfers;\n"]}