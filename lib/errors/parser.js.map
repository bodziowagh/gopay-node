{"version":3,"sources":["parser.js"],"names":["__assign","Object","assign","t","s","i","n","arguments","length","p","prototype","hasOwnProperty","call","APIError_1","require","PathParameterError_1","RequestParameterError_1","Code","getCodeByStatus","status","codeMap","BAD_REQUEST","NOT_AUTHORIZED","FORBIDDEN","NOT_FOUND","NOT_ALLOWED","CONFLICTED","TOO_MANY_REQUESTS","INTERNAL_ERROR","SERVICE_UNAVAILABLE","keys","indexOf","toString","UNKNOWN","fromError","error","errorResponse","PathParameterError","code","REQUEST_ERROR","errors","parameter","RequestParameterError","VALIDATION_ERROR","field","reason","APIError","response","httpCode","exports"],"mappings":"AAAA;;AACA,IAAIA,WAAY,aAAQ,UAAKA,QAAd,IAA2BC,OAAOC,MAAlC,IAA4C,UAASC,CAAT,EAAY;AACnE,SAAK,IAAIC,CAAJ,EAAOC,IAAI,CAAX,EAAcC,IAAIC,UAAUC,MAAjC,EAAyCH,IAAIC,CAA7C,EAAgDD,GAAhD,EAAqD;AACjDD,YAAIG,UAAUF,CAAV,CAAJ;AACA,aAAK,IAAII,CAAT,IAAcL,CAAd;AAAiB,gBAAIH,OAAOS,SAAP,CAAiBC,cAAjB,CAAgCC,IAAhC,CAAqCR,CAArC,EAAwCK,CAAxC,CAAJ,EACbN,EAAEM,CAAF,IAAOL,EAAEK,CAAF,CAAP;AADJ;AAEH;AACD,WAAON,CAAP;AACH,CAPD;AAQA,IAAMU,aAAaC,QAAQ,YAAR,CAAnB;AACA,IAAMC,uBAAuBD,QAAQ,sBAAR,CAA7B;AACA,IAAME,0BAA0BF,QAAQ,yBAAR,CAAhC;AACA,IAAMG,OAAOH,QAAQ,mBAAR,CAAb;AACA,SAASI,eAAT,CAAyBC,MAAzB,EAAiC;AAC7B,QAAMC,UAAU;AACZ,aAAKH,KAAKI,WADE;AAEZ,aAAKJ,KAAKK,cAFE;AAGZ,aAAKL,KAAKM,SAHE;AAIZ,aAAKN,KAAKO,SAJE;AAKZ,aAAKP,KAAKQ,WALE;AAMZ,aAAKR,KAAKS,UANE;AAOZ,aAAKT,KAAKU,iBAPE;AAQZ,aAAKV,KAAKW,cARE;AASZ,aAAKX,KAAKY;AATE,KAAhB;AAWA,QAAI5B,OAAO6B,IAAP,CAAYV,OAAZ,EAAqBW,OAArB,CAA6BZ,OAAOa,QAAP,EAA7B,MAAoD,CAAC,CAAzD,EAA4D;AACxD,eAAOZ,QAAQD,MAAR,CAAP;AACH;AACD,WAAOF,KAAKgB,OAAZ;AACH;AACD,SAASC,SAAT,CAAmBC,KAAnB,EAA0B;AACtB,QAAIC,sBAAJ;AACA,QAAID,iBAAiBpB,qBAAqBsB,kBAA1C,EAA8D;AAAA;;AAC1DD,wBAAgB;AACZE,kBAAMrB,KAAKsB,aADC;AAEZC,oBAAQ,kBAAIL,MAAMM,SAAV,IAAsB,UAAtB;AAFI,SAAhB;AAIH,KALD,MAMK,IAAIN,iBAAiBnB,wBAAwB0B,qBAA7C,EAAoE;AACrEN,wBAAgB;AACZE,kBAAMrB,KAAK0B,gBADC;AAEZH,oBAAQ,CAAC;AACDI,uBAAOT,MAAMM,SADZ;AAEDI,wBAAQ;AAFP,aAAD;AAFI,SAAhB;AAOH,KARI,MASA,IAAIV,iBAAiBtB,WAAWiC,QAAhC,EAA0C;AAC3CV,wBAAgB;AACZE,kBAAMH,MAAMY,QAAN,GAAiBZ,MAAMY,QAAN,CAAeT,IAAhC,GAAuCpB,gBAAgBiB,MAAMhB,MAAtB,CADjC;AAEZ6B,sBAAUb,MAAMhB;AAFJ,SAAhB;AAIH;AACD,WAAOnB,SAAS,EAAEsC,MAAMrB,KAAKgB,OAAb,EAAsBO,QAAQ,EAA9B,EAAkCrB,QAAQ,OAA1C,EAAT,EAA8DiB,aAA9D,CAAP;AACH;AACDa,QAAQf,SAAR,GAAoBA,SAApB","file":"parser.js","sourcesContent":["\"use strict\";\nvar __assign = (this && this.__assign) || Object.assign || function(t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n        s = arguments[i];\n        for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))\n            t[p] = s[p];\n    }\n    return t;\n};\nconst APIError_1 = require(\"./APIError\");\nconst PathParameterError_1 = require(\"./PathParameterError\");\nconst RequestParameterError_1 = require(\"./RequestParameterError\");\nconst Code = require(\"./ErrorsConstants\");\nfunction getCodeByStatus(status) {\n    const codeMap = {\n        400: Code.BAD_REQUEST,\n        401: Code.NOT_AUTHORIZED,\n        403: Code.FORBIDDEN,\n        404: Code.NOT_FOUND,\n        405: Code.NOT_ALLOWED,\n        409: Code.CONFLICTED,\n        429: Code.TOO_MANY_REQUESTS,\n        500: Code.INTERNAL_ERROR,\n        503: Code.SERVICE_UNAVAILABLE\n    };\n    if (Object.keys(codeMap).indexOf(status.toString()) !== -1) {\n        return codeMap[status];\n    }\n    return Code.UNKNOWN;\n}\nfunction fromError(error) {\n    let errorResponse;\n    if (error instanceof PathParameterError_1.PathParameterError) {\n        errorResponse = {\n            code: Code.REQUEST_ERROR,\n            errors: [{ [error.parameter]: \"required\" }]\n        };\n    }\n    else if (error instanceof RequestParameterError_1.RequestParameterError) {\n        errorResponse = {\n            code: Code.VALIDATION_ERROR,\n            errors: [{\n                    field: error.parameter,\n                    reason: \"REQUIRED_VALUE\"\n                }]\n        };\n    }\n    else if (error instanceof APIError_1.APIError) {\n        errorResponse = {\n            code: error.response ? error.response.code : getCodeByStatus(error.status),\n            httpCode: error.status\n        };\n    }\n    return __assign({ code: Code.UNKNOWN, errors: [], status: \"error\" }, errorResponse);\n}\nexports.fromError = fromError;\n"]}