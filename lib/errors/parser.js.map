{"version":3,"sources":["parser.js"],"names":["APIError_1","require","PathParameterError_1","RequestParameterError_1","Code","getCodeByStatus","status","codeMap","BAD_REQUEST","NOT_AUTHORIZED","FORBIDDEN","NOT_FOUND","NOT_ALLOWED","CONFLICTED","TOO_MANY_REQUESTS","INTERNAL_ERROR","SERVICE_UNAVAILABLE","Object","keys","indexOf","toString","UNKNOWN","fromError","error","errorResponse","PathParameterError","RequestParameterError","code","VALIDATION_ERROR","errors","parameter","APIError","response","assign","exports"],"mappings":"AAAA;;AACA,IAAMA,aAAaC,QAAQ,YAAR,CAAnB;AACA,IAAMC,uBAAuBD,QAAQ,sBAAR,CAA7B;AACA,IAAME,0BAA0BF,QAAQ,yBAAR,CAAhC;AACA,IAAMG,OAAOH,QAAQ,mBAAR,CAAb;AACA,SAASI,eAAT,CAAyBC,MAAzB,EAAiC;AAC7B,QAAMC,UAAU;AACZ,aAAKH,KAAKI,WADE;AAEZ,aAAKJ,KAAKK,cAFE;AAGZ,aAAKL,KAAKM,SAHE;AAIZ,aAAKN,KAAKO,SAJE;AAKZ,aAAKP,KAAKQ,WALE;AAMZ,aAAKR,KAAKS,UANE;AAOZ,aAAKT,KAAKU,iBAPE;AAQZ,aAAKV,KAAKW,cARE;AASZ,aAAKX,KAAKY;AATE,KAAhB;AAWA,QAAIC,OAAOC,IAAP,CAAYX,OAAZ,EAAqBY,OAArB,CAA6Bb,OAAOc,QAAP,EAA7B,MAAoD,CAAC,CAAzD,EAA4D;AACxD,eAAOb,QAAQD,MAAR,CAAP;AACH;AACD,WAAOF,KAAKiB,OAAZ;AACH;AACD,SAASC,SAAT,CAAmBC,KAAnB,EAA0B;AACtB,QAAIC,sBAAJ;AACA,QAAKD,iBAAiBrB,qBAAqBuB,kBAAvC,IAA8DF,iBAAiBpB,wBAAwBuB,qBAA3G,EAAkI;AAAA;;AAC9HF,wBAAgB;AACZG,kBAAMvB,KAAKwB,gBADC;AAEZC,oBAAQ,kBAAIN,MAAMO,SAAV,IAAsB,UAAtB;AAFI,SAAhB;AAIH,KALD,MAMK,IAAIP,iBAAiBvB,WAAW+B,QAAhC,EAA0C;AAC3CP,wBAAgBD,MAAMS,QAAN,GAAiBT,MAAMS,QAAvB,GAAkC,EAAEL,MAAMtB,gBAAgBkB,MAAMjB,MAAtB,CAAR,EAAlD;AACH;AACD,WAAOW,OAAOgB,MAAP,CAAc;AACjBN,cAAMvB,KAAKiB,OADM;AAEjBQ,gBAAQ,EAFS;AAGjBvB,gBAAQ;AAHS,KAAd,EAIJkB,aAJI,CAAP;AAKH;AACDU,QAAQZ,SAAR,GAAoBA,SAApB","file":"parser.js","sourcesContent":["\"use strict\";\nconst APIError_1 = require(\"./APIError\");\nconst PathParameterError_1 = require(\"./PathParameterError\");\nconst RequestParameterError_1 = require(\"./RequestParameterError\");\nconst Code = require(\"./ErrorsConstants\");\nfunction getCodeByStatus(status) {\n    const codeMap = {\n        400: Code.BAD_REQUEST,\n        401: Code.NOT_AUTHORIZED,\n        403: Code.FORBIDDEN,\n        404: Code.NOT_FOUND,\n        405: Code.NOT_ALLOWED,\n        409: Code.CONFLICTED,\n        429: Code.TOO_MANY_REQUESTS,\n        500: Code.INTERNAL_ERROR,\n        503: Code.SERVICE_UNAVAILABLE\n    };\n    if (Object.keys(codeMap).indexOf(status.toString()) !== -1) {\n        return codeMap[status];\n    }\n    return Code.UNKNOWN;\n}\nfunction fromError(error) {\n    let errorResponse;\n    if ((error instanceof PathParameterError_1.PathParameterError) || error instanceof RequestParameterError_1.RequestParameterError) {\n        errorResponse = {\n            code: Code.VALIDATION_ERROR,\n            errors: [{ [error.parameter]: \"required\" }]\n        };\n    }\n    else if (error instanceof APIError_1.APIError) {\n        errorResponse = error.response ? error.response : { code: getCodeByStatus(error.status) };\n    }\n    return Object.assign({\n        code: Code.UNKNOWN,\n        errors: [],\n        status: \"error\"\n    }, errorResponse);\n}\nexports.fromError = fromError;\n"]}